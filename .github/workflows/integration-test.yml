name: Integration Tests

on:
  workflow_call:
    inputs:
      image-ref:
        required: true
        type: string

jobs:
  integration-test:
    runs-on: ubuntu-24.04
    env:
      SSH_PORT: 2222
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate SSH Key Pair
        run: |
          ssh-keygen -t ed25519 -f ~/.ssh/test_key -N "" -C "aurora-ci-user@github-actions.com"
          echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat ~/.ssh/test_key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          PUBLIC_KEY=$(cat ~/.ssh/test_key.pub)
          cat > ./tests/qcow2-config.toml << EOF
          [[customizations.user]]
          name = "aurora-ci-user"
          key = "$PUBLIC_KEY"
          groups = ["wheel"]
          EOF

          # Verify the update
          echo "Updated config file:"
          cat ./tests/qcow2-config.toml

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Build QCOW Image
        id: build
        uses: osbuild/bootc-image-builder-action@v0.0.2
        with:
          config-file: ./tests/qcow2-config.toml
          image: ${{ inputs.image-ref }}
          types: |
            qcow2

      - name: Setup KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm --settle
          ls -l /dev/kvm

          sudo apt-get update
          sudo apt-get install -y qemu-system-x86

      - name: Run QEMU VM
        id: run-qemu
        env:
          QCOW2_PATH: ${{ steps.build.outputs.qcow2-output-path }}
        run: |
          LOG_FILE="/tmp/qemu-serial.log"

          qemu-system-x86_64 \
            -enable-kvm \
            -cpu host \
            -smp 2 \
            -display none \
            -m 8192 \
            -device virtio-rng-pci \
            -serial file:$LOG_FILE \
            -drive file=$QCOW2_PATH,if=virtio \
            -snapshot \
            -net nic,model=virtio \
            -net user,hostfwd=tcp::$SSH_PORT-:22 &
          QEMU_PID=$!

          echo "QEMU started with PID: $QEMU_PID"

          # Wait for log file to appear (max 30s)
          for i in {1..30}; do
            [ -f "$LOG_FILE" ] && break
            sleep 1
          done

          if [ ! -f "$LOG_FILE" ]; then
            echo "Warning: Log file did not appear"
          fi

          # Wait 60 seconds and show log
          echo "Waiting for VM to boot (60 seconds)..."
          timeout 60 tail -f $LOG_FILE || true

          echo "Current log contents:"
          cat $LOG_FILE || echo "No log file available"

          disown $QEMU_PID
          echo "QEMU_PID=$QEMU_PID" >> $GITHUB_OUTPUT

      - name: Wait for SSH
        run: |
          echo "Waiting for SSH service to be ready..."
          max_attempts=60  # Wait up to 10 minutes
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if nc -z localhost $SSH_PORT; then
              echo "Port $SSH_PORT is open, waiting a bit more for SSH to be fully ready..."
              sleep 10
              # Test if we can actually connect with SSH
              if ssh -i ~/.ssh/test_key -p $SSH_PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 -o LogLevel=ERROR aurora-ci-user@localhost "echo 'SSH connection test successful'" 2>/dev/null; then
                echo "SSH connection successful!"
                break
              else
                echo "Port open but SSH not ready yet, waiting..."
              fi
            else
              echo "Waiting for SSH port to open... (attempt $((attempt + 1))/$max_attempts)"
            fi
            sleep 10
            attempt=$((attempt + 1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "SSH service did not become ready within the timeout period"
            exit 1
          fi

      - name: Run Tests
        working-directory: ./tests
        env:
          SSH_PRIVATE_KEY: ${{ env.SSH_PRIVATE_KEY }}
          SSH_PORT: ${{ env.SSH_PORT }}
        run: |
          python3 ./qemu_test.py
